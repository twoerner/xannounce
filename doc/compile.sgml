<!--
       AUTHOR: Trevor Woerner
   START DATE: 27 January 2001 - 12:50:17 AM
     MODIFIED: 14 February 2001 - 09:13:57 AM
     FILENAME: install.sgml
      PURPOSE: compile and installation for xannounce

   $Revision: 1.5 $
   Copyright (C) 2001  Trevor Woerner

    Permission is granted to copy, distribute, and/or modify
    this document under the terms of the GNU Free Documentation
    License, Version 1.1 or any later version published by the
    Free Software Foundation; with no invariant sections, with
    no Front-Cover Texts, and with no Back-Cover Texts.

    To receive a copy of the GNU Free Documentation License
    visit http://www.gnu.org/copyleft/fdl.html or write to
    the Free Software Foundation, 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
-->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
    <!ENTITY filename   SYSTEM "file.sgml">
    <!ENTITY configure  "<command>configure</command>">
]>

<book>
    <bookinfo>
        <title>Compile and Installation</title>
        <date>14 February 2001</date>
        <author><firstname>Trevor</firstname><surname>Woerner</surname></author>
        <copyright>
            <year>2001</year>
            <holder>Trevor Woerner</holder>
        </copyright>
    </bookinfo>

    <article>
        <title>xannounce Specific Instructions</title>

        <sect1>
            <title>Requirements</title>
            <para>
                The following is a list of requirements and some indication of which versions
                this software has been tested with. The version numbers given don't indicate
                that other versions (both older and newer) won't work, they might. These
                are simply what i have available to me. Therefore i can say this package works
                with these versions with confidence. I can't give any recommendations for
                other versions.
            </para>
            <itemizedlist>
                <listitem><para>
                    a UNIX or GNU/Linux based system
                </para></listitem>
                <listitem><para>
                    an X server with Xlib libraries (i've tested with XFree86 versions 3.3.6,
                    4.0.1, and 4.0.2)
                </para></listitem>
                <listitem><para>
                    a compiler suite (i've used gcc 2.95.2)
                </para></listitem>
                <listitem><para>
                    the GNU autotools (autoconf 2.13, automake 1.4)
                </para></listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>Unpack and Compile</title>
            <itemizedlist>
                <listitem><para>
                    unpack the sources
                    <screen>
user$ gzip -d &lt; xannounce-<emphasis>version</emphasis>-tar.gz | tar xf -
                    </screen>
                    <note>
                        <para>
                            replace <emphasis>version</emphasis> with the appropriate version
                            numbers of the package you have downloaded and want to install
                        </para>
                    </note>
                </para></listitem>
                <listitem><para>
                    move into the newly created directory (created by the unpacking process)
                </para></listitem>
                <listitem><para>
                    configure the build for your system
                    <screen>
user$ ./configure                        
                    </screen>
                    there are a number of options that can be optionally be passed to
                    &configure;, the defaults are usually fine
                </para></listitem>
                <listitem><para>
                    build
                    <screen>
user$ make
                    </screen>
                </para></listitem>
            </itemizedlist>
        </sect1>

        <sect1>
            <title>Project Specific &configure; Switches</title>
            <para>
                None.
            </para>
        </sect1>

        <sect1>
            <title>Usage</title>
            <para>
                To run the application just simply pass it a string on the command line. For
                example:
                <screen>
user$ xannounce 'Welcome to xannounce!'
                </screen>
                <note>
                    <para>
                        The single quotes are required here to make sure <command>bash</command>
                        doesn't interpret the <literal>!</literal> to be the history command.
                    </para>
                </note>
            </para>
        </sect1>
    </article>

    <article>
        <title>Generic Instructions</title>
        <sect1>
            <title>Basic Installation</title>
            <para>
                These are generic installation instructions.
            </para><para>
                The &configure; shell script attempts to guess
                correct values for various system-dependent variables used during
                compilation.  It uses those values to create a
                <filename>Makefile</filename> in each directory of the package.
                It may also create one or more <filename>.h</filename> files
                containing system-dependent definitions.  Finally, it creates
                a shell script <command>config.status</command> that you can run
                in the future to recreate the current configuration, a file
                <filename>config.cache</filename> that saves the results of its
                tests to speed up reconfiguring, and a file <filename>config.log</filename>
                containing compiler output (useful mainly for debugging 
                &configure;).
            </para><para>
                If you need to do unusual things to compile the package, please try
                to figure out how &configure; could check whether
                to do them, and mail diffs or instructions to the address given in
                the <filename>AUTHORS</filename> so they can be considered for the
                next release.  If at some point <filename>config.cache</filename>
                contains results you don't want to keep, you may remove or edit it.
            </para><para>
                The file <filename>configure.in</filename> is used to create
                &configure; by a program called <command>autoconf</command>.
                You only need <filename>configure.in</filename> if you want to change
                it or regenerate &configure; using a newer version of
                <command>autoconf</command>.
            </para><para>
                The simplest way to compile this package is:
                <orderedlist>
                    <listitem><para>
                        <command>cd</command> to the directory containing the package's
                        source code and type <command>./configure</command> to configure
                        the package for your system.  If you're using <command>csh</command>
                        on an old version of System V, you might need to type
                        <command>sh ./configure</command> instead to prevent
                        <command>csh</command> from trying to execute &configure; itself.
                      </para><para>
                        Running &configure; takes awhile. While running,
                        it prints some messages telling which features it is checking for.
                    </para></listitem>
                    <listitem><para>
                        Type <command>make</command> to compile the package.
                    </para></listitem>
                    <listitem><para>
                        Optionally, type <command>make check</command> to run any self-tests
                        that come with the package.
                    </para></listitem>
                    <listitem><para>
                        Type <command>make install</command> to install the programs
                        and any data files and documentation.
                    </para></listitem>
                    <listitem><para>
                        You can remove the program binaries and object files from the
                        source code directory by typing <command>make clean</command>.
                        To also remove the files that &configure; created (so you can
                        compile the package for a different kind of computer), type
                        <command>make distclean</command>. There is also a
                        <command>make maintainer-clean</command> target, but that
                        is intended mainly for the package's developers.  If you use it,
                        you may have to get all sorts of other programs in order to
                        regenerate files that came with the distribution.
                    </para></listitem>
                </orderedlist>
            </para>
        </sect1>

        <sect1>
            <title>Compilers and Options</title>
            <para>
                Some systems require unusual options for compilation or linking that
                the &configure; script does not know about.  You can give &configure;
                initial values for variables by setting them in the environment.  Using
                a Bourne-compatible shell, you can do that on the command line like
                this:
                <screen>
CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure
                </screen>
                Or on systems that have the <command>env</command> program, you
                can do it like this:
                <screen>
env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure
                </screen>
            </para>
        </sect1>

        <sect1>
            <title>Compiling For Multiple Architectures</title>
            <para>
                You can compile the package for more than one kind of computer at the
                same time, by placing the object files for each architecture in their
                own directory.  To do this, you must use a version of
                <command>make</command> that supports the <literal>VPATH</literal>
                variable, such as GNU <command>make</command>. <command>cd</command>
                to the directory where you want the object files and executables to go and run
                the &configure; script. &configure; automatically checks for the source
                code in the directory <literal>..</literal> and in the directory that
                &configure; is in.
            </para><para>
                If you have to use a <command>make</command> that does not supports the
                <literal>VPATH</literal> variable, you have to compile the package for
                one architecture at a time in the source code directory.  After you have
                installed the package for one architecture, use <command>make distclean</command>
                before reconfiguring for another architecture.
            </para>
        </sect1>

        <sect1>
            <title>Installation Names</title>
            <para>
                By default, <command>make install</command> will install the package's files in
                <filename>/usr/local/bin</filename>, <filename>/usr/local/man</filename>,
                etc.  You can specify an installation prefix other than
                <filename>/usr/local</filename> by giving &configure; the option
                <literal>--prefix=PATH</literal>.
            </para><para>
                You can specify separate installation prefixes for architecture-specific
                files and architecture-independent files. If you give &configure; the option
                <literal>--exec-prefix=PATH</literal>, the package will use
                <literal>PATH</literal> as the prefix for installing programs and libraries.
                Documentation and other data files will still use the regular prefix.
            </para><para>
                In addition, if you use an unusual directory layout you can give options like
                <literal>--bindir=PATH</literal> to specify different values for particular
                kinds of files.  Run <command>configure --help</command> for a list of the
                directories you can set and what kinds of files go in them.
            </para><para>
                If the package supports it, you can cause programs to be installed with an
                extra prefix or suffix on their names by giving &configure; the option
                <literal>--program-prefix=PREFIX</literal> or
                <literal>--program-suffix=SUFFIX</literal>.
            </para>
        </sect1>

        <sect1>
            <title>Optional Features</title>
            <para>
                Some packages pay attention to <literal>--enable-FEATURE</literal> options to
                &configure;, where <literal>FEATURE</literal> indicates an optional part of
                the package. They may also pay attention to <literal>--with-PACKAGE</literal>
                options, where <literal>PACKAGE</literal> is something like
                <literal>gnu-as</literal> or <literal>x</literal> (for the X Window System).
                See below in the "Specific Instructions" section for any
                <literal>--enable-</literal> and <literal>--with-</literal> options that
                the package recognizes.
            </para><para>
                For packages that use the X Window System, &configure; can usually find the
                X include and library files automatically, but if it doesn't, you can use the
                &configure; options <literal>--x-includes=DIR</literal> and
                <literal>--x-libraries=DIR</literal> to specify their locations.
            </para>
        </sect1>

        <sect1>
            <title>Specifying the System Type</title>
            <para>
                There may be some features &configure; can not figure out automatically,
                but needs to determine by the type of host the package will run on. Usually
                &configure; can figure that out, but if it prints a message saying it can
                not guess the host type, give it the <literal>--host=TYPE</literal> option.
                <literal>TYPE</literal> can either be a short name for the system type, such
                as <literal>sun4</literal>, or a canonical name with three fields:
                <screen>
CPU-COMPANY-SYSTEM
                </screen>
            </para><para>
                See the file <filename>config.sub</filename> for the possible values of
                each field. If <filename>config.sub</filename> isn't included in this
                package, then this package doesn't need to know the host type.
            </para><para>
                If you are building compiler tools for cross-compiling, you can also use the
                <literal>--target=TYPE</literal> option to select the type of system they will
                produce code for and the <literal>--build=TYPE</literal> option to select the
                type of system on which you are compiling the package.
            </para>
        </sect1>

        <sect1>
            <title>Sharing Defaults</title>
            <para>
                If you want to set default values for &configure; scripts to share, you can
                create a site shell script called <command>config.site</command> that gives
                default values for variables like <literal>CC</literal>,
                <literal>cache_file</literal>, and <literal>prefix</literal>. &configure;
                looks for <filename>PREFIX/share/config.site</filename> if it exists, then
                <filename>PREFIX/etc/config.site</filename> if it exists.  Or, you can set the
                <literal>CONFIG_SITE</literal> environment variable to the location of the
                site script.
                <warning>
                    <para>
                        not all `configure' scripts look for a site script
                    </para>
                </warning>
            </para>
        </sect1>

        <sect1>
            <title>Operation Controls</title>
            <variablelist>
                <title>&configure; recognizes the following options to control how it
                operates</title>
                
                <varlistentry>
                    <term><literal>--cache-file=FILE</literal></term>
                    <listitem><para>
                        Use and save the results of the tests in <literal>FILE</literal>
                        instead of <filename>./config.cache</filename>. Set
                        <literal>FILE</literal> to <filename>/dev/null</filename> to
                        disable caching, for debugging &configure;.
                    </para></listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>--help</literal></term>
                    <listitem><para>
                        Print a summary of the options to &configure;, and exit.
                    </para></listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>--quiet</literal></term>
                    <term><literal>--silent</literal></term>
                    <term><literal>-q</literal></term>
                    <listitem><para>
                        Do not print messages saying which checks are being made.  To
                        suppress all normal output, redirect it to <filename>/dev/null</filename>
                        (any error messages will still be shown).
                    </para></listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>--srcdir=DIR</literal></term>
                    <listitem><para>
                        Look for the package's source code in directory <literal>DIR</literal>.
                        Usually &configure; can determine that directory automatically.
                    </para></listitem>
                </varlistentry>

                <varlistentry>
                    <term><literal>--version</literal></term>
                    <listitem><para>
                        Print the version of <command>Autoconf</command> used to generate the
                        &configure; script, and exit.
                    </para></listitem>
                </varlistentry>
            </variablelist>
            <para>
                &configure; also accepts some other, not widely useful, options.
            </para>
        </sect1>
    </article>

</book>
